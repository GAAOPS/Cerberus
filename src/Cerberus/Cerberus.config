<?xml version="1.0" encoding="utf-8"?>

<cerberus>
  <configurations>
    <configuration name="Helix.Base" abstract="true">
      <sourceDataStore physicalRootPath="$(configPath)..\..\..\..\..\Habitat\src\$(layer)\$(module)\Serialization"
                       useDataCache="true"
                       type="Cerberus.Unicorn.SerializationFileSystemDataStore, Cerberus.Unicorn"
                       singleInstance="true" />
      <fieldFilter type="Rainbow.Filtering.ConfigurationFieldFilter, Rainbow" singleInstance="true">
        <exclude fieldID="{B1E16562-F3F9-4DDD-84CA-6E099950ECC0}" note="'Last run' field on Schedule template (used to register tasks)" />
        <exclude fieldID="{52807595-0F8F-4B20-8D2A-CB71D28C6103}" note="'__Owner' field on Standard Template" />
        <exclude fieldID="{8CDC337E-A112-42FB-BBB4-4143751E123F}" note="'__Revision' field on Standard Template" />
        <exclude fieldID="{D9CF14B1-FA16-4BA6-9288-E8A174D4D522}" note="'__Updated' field on Standard Template" />
        <exclude fieldID="{BADD9CF9-53E0-4D0C-BCC0-2D784C282F6A}" note="'__Updated by' field on Standard Template" />
        <exclude fieldID="{001DD393-96C5-490B-924A-B0F25CD9EFD8}" note="'__Lock' field on Standard Template" />
      </fieldFilter>
      <serializationFormatter type="Rainbow.Storage.Yaml.YamlSerializationFormatter, Rainbow.Storage.Yaml" singleInstance="true">
        <fieldFormatter type="Rainbow.Formatting.FieldFormatters.MultilistFormatter, Rainbow" />
        <fieldFormatter type="Rainbow.Formatting.FieldFormatters.XmlFieldFormatter, Rainbow" />
        <fieldFormatter type="Rainbow.Formatting.FieldFormatters.CheckboxFieldFormatter, Rainbow" />
      </serializationFormatter>
    </configuration>
  </configurations>

  <validator extends="Helix.Base">
    <templateReader type="Cerberus.Unicorn.RainbowTemplateReader, Cerberus.Unicorn" singleInstance="true" />
    <renderingReader type="Cerberus.Unicorn.RainbowRenderingReader, Cerberus.Unicorn" singleInstance="true" />
    <settingsReader type="Cerberus.Unicorn.RainbowSettingsReader, Cerberus.Unicorn" singleInstance="true" settingsRootPath="/sitecore/system/Settings" />
    <predicate type="Cerberus.Unicorn.SerializationPresetPredicate, Cerberus.Unicorn" singleInstance="true">
      <include name="Templates" path="/sitecore/templates/$(layer)/$(module)" database="master" />
      <include name="Renderings" path="/sitecore/layout/renderings/$(layer)/$(module)" database="master" />
      <include name="Settings" path="/sitecore/system/Settings/$(layer)/$(module)" database="master" />
    </predicate>
  </validator>

  <!--Configuration needed to initialise the app-->
  <init name="providers">
    <dataSourceLocationProvider dataSourceLocation="$(configPath)..\..\..\..\..\Habitat\src"
                                serializationFolder="serialization" root="$(configPath)"
                                type="Cerberus.Core.Configuration.DataSourceLocationProvider, Cerberus.Core"
                                singleInstance="true" />
    <helixModuleProvider type="Cerberus.Core.Configuration.HelixModuleProvider, Cerberus.Core" singleInstance="true" pattern="$configpath\$layer\$module\Serialization"/>
    <variablesReplacers type="Cerberus.Core.Configuration.CerberusVariablesReplacer, Cerberus.Core" singleInstance="true">
      <replacer name ="HelixConventionVariablesReplacer" type="Cerberus.Core.Configuration.HelixConventionVariablesReplacer, Cerberus.Core" singleInstance="true" />
      <replacer name ="ConfigTokenReplacer" type="Cerberus.Core.Configuration.ConfigTokenReplacer, Cerberus.Core" singleInstance="true" configPath="$(configPath)"/>
    </variablesReplacers>
    <configurationService configPath="$(configPath)" type="Cerberus.Unicorn.RainbowConfigurationService, Cerberus.Unicorn" singleInstance="true" />
    <layers type="Cerberus.Core.Configuration.HelixDependencyConfigurationProvider, Cerberus.Core" singleInstance="true">
      <layer name="Foundation" dependsOn="Foundation" type="Cerberus.Core.Configuration.HelixLayer, Cerberus.Core" />
      <layer name="Feature" dependsOn="Foundation" type="Cerberus.Core.Configuration.HelixLayer, Cerberus.Core" />
      <layer name="Project" dependsOn="Foundation,Feature" type="Cerberus.Core.Configuration.HelixLayer, Cerberus.Core" />
    </layers>
    <analyzers type="Cerberus.Analyzers.HelixAnalyzerService, Cerberus.Analyzers" singleInstance="true">
      <analyzer type="Cerberus.Analyzers.TemplateAnalyzer, Cerberus.Analyzers">
        <rule name="TemplateInheritance" type="Cerberus.Rules.TemplateInheritance, Cerberus.Rules" allowInheritanceInsideSameModule="true" errorAction="Fail" />
        <rule name="TemplateDuplicateField" type="Cerberus.Rules.TemplateDuplicateFieldAnalyzer, Cerberus.Rules" errorAction="Fail" />
        <rule name="TemplateNamingConvention" type="Cerberus.Rules.TemplateNamingConvention, Cerberus.Rules" illegalChars=",-.|'" errorAction="Fail" />
        <rule name="TemplateFoundationNamingConvention" type="Cerberus.Rules.TemplateFoundationNamingConvention, Cerberus.Rules" errorAction="Warning" />
        <rule name="TemplateCircularReference" type="Cerberus.Rules.TemplateCircularReference, Cerberus.Rules" errorAction="Fail" />
      </analyzer>
      <analyzer type="Cerberus.Analyzers.RenderingAnalyzer,Cerberus.Analyzers">
        <rule name="RenderingNameConvention" type="Cerberus.Rules.RenderingNameConvention,Cerberus.Rules" errorAction="Fail" />
        <rule name="RenderingDataSource" type="Cerberus.Rules.RenderingDataSource,Cerberus.Rules" datasourceLocation="true" datasourceTemplate="true" errorAction="Fail" />
        <!--<rule name = "RenderingCompatibleRendering" type="Cerberus.Rules.RenderingDataSource,Cerberus.Rules" datasourceLocation="true" datasourceTemplate="true" />
        <rule name = "AlowRenderingInFoundation" type="Cerberus.Rules.RenderingDataSource,Cerberus.Rules" datasourceLocation="true" datasourceTemplate="true" />-->
      </analyzer>
      <analyzer type="Cerberus.Analyzers.SettingsAnalyzer,Cerberus.Analyzers">
        <rule name="SettingCrossModuleTemplateCheck" type="Cerberus.Rules.SettingCrossModuleTemplateCheck,Cerberus.Rules" errorAction="Fail" />
      </analyzer>
    </analyzers>
    <!--Possible Values: None to ignore, Warning = fail with warning, Fail, to fail only with fail and ignore warnings-->
    <exitCodePolicy type="Cerberus.Core.Configuration.ExitCodePolicy,Cerberus.Core" failOn="Warning"/>
  </init>
  <loggers type="Cerberus.Core.Logging.LogDispatcher, Cerberus.Core" singleInstance="true">
    <logger name="ConsoleLogger" type="Cerberus.Core.Logging.ConsoleLogger, Cerberus.Core" singleInstance="true" />
    <logger name="HtmlLogger" type="Cerberus.Core.Logging.HtmlLogger, Cerberus.Core" singleInstance="true" outputPath="$(configPath)..\..\..\..\..\Reports\" />
  </loggers>
</cerberus>